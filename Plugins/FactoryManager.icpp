/***********************************************************************
FactoryManager - Generic base class for managers of factory classes
derived from a common base class. Intended to manage loading of dynamic
shared objects.
Copyright (c) 2003-2025 Oliver Kreylos

This file is part of the Plugin Handling Library (Plugins).

The Plugin Handling Library is free software; you can redistribute it
and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Plugin Handling Library is distributed in the hope that it will be
useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with the Plugin Handling Library; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
***********************************************************************/

#define PLUGINS_FACTORYMANAGER_IMPLEMENTATION

#include <Plugins/FactoryManager.h>

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dlfcn.h>
#include <Misc/StdError.h>

namespace Plugins {

/*******************************
Methods of class FactoryManager:
*******************************/

template <class ManagedFactoryParam>
inline
typename FactoryManager<ManagedFactoryParam>::ClassIdType
FactoryManager<ManagedFactoryParam>::getNewClassId(
	void) const
	{
	ClassIdType newClassId;
	typename FactoryList::const_iterator fIt;
	do
		{
		/* Generate a random class ID: */
		newClassId=ClassIdType(rand()%maxClassId);
		
		/* Search if the proposed class ID is already taken: */
		for(fIt=factories.begin();fIt!=factories.end()&&fIt->classId!=newClassId;++fIt)
			;
		}
	while(fIt!=factories.end());
	
	return newClassId;
	}

template <class ManagedFactoryParam>
inline
typename FactoryManager<ManagedFactoryParam>::FactoryList::const_iterator
FactoryManager<ManagedFactoryParam>::findFactory(
	const char* className) const
	{
	/* Search for the factory in the list: */
	typename FactoryList::const_iterator fIt;
	for(fIt=factories.begin();fIt!=factories.end()&&strcmp(fIt->factory->getClassName(),className)!=0;++fIt)
		;
	return fIt;
	}

template <class ManagedFactoryParam>
inline
typename FactoryManager<ManagedFactoryParam>::FactoryList::iterator
FactoryManager<ManagedFactoryParam>::findFactory(
	const char* className)
	{
	/* Search for the factory in the list: */
	typename FactoryList::iterator fIt;
	for(fIt=factories.begin();fIt!=factories.end()&&strcmp(fIt->factory->getClassName(),className)!=0;++fIt)
		;
	return fIt;
	}

template <class ManagedFactoryParam>
inline
void
FactoryManager<ManagedFactoryParam>::destroyFactory(
	typename FactoryManager<ManagedFactoryParam>::FactoryList::iterator factoryIt)
	{
	/* Bail out if the class doesn't exist: */
	if(factoryIt==factories.end())
		return;
	
	/* Check if the class still has children: */
	if(!factoryIt->factory->getChildren().empty())
		throw Error(Misc::makeStdErrMsg(__PRETTY_FUNCTION__,"Unable to remove class %s due to active dependencies",factoryIt->factory->getClassName()));
	
	/* Destroy factory and close DSO: */
	if(factoryIt->destroyFactoryFunction!=0)
		factoryIt->destroyFactoryFunction(factoryIt->factory);
	if(factoryIt->dsoHandle!=0)
		dlclose(factoryIt->dsoHandle);
	
	/* Remove the class from the factory list: */
	factories.erase(factoryIt);
	}

template <class ManagedFactoryParam>
inline
FactoryManager<ManagedFactoryParam>::~FactoryManager(
	void)
	{
	/* Release all classes: */
	releaseClasses();
	}

template <class ManagedFactoryParam>
inline
std::pair<typename FactoryManager<ManagedFactoryParam>::ManagedFactory*,bool>
FactoryManager<ManagedFactoryParam>::loadClassAndCheck(
	const char* className)
	{
	/* Extract an identifying class name from the given name, which might be the full name of a DSO: */
	std::pair<std::string,bool> cn=extractClassName(className);
	
	/* Check if the requested class already exists: */
	typename FactoryList::iterator fIt=findFactory(cn.first.c_str());
	if(fIt!=factories.end())
		{
		/* Return the existing factory: */
		return std::make_pair(fIt->factory,false);
		}
	else
		{
		/* Load the DSO corresponding to the requested class name: */
		LoadDsoResults ldr=loadDso(className,cn.second,cn.first);
		
		/* Call the dependency resolution function if it is provided: */
		if(ldr.resolveDependencies!=0)
			{
			typedef void (*ResolveDependenciesFunction)(FactoryManager<ManagedFactory>&); // Type of dependency resolution function stored in DSOs
			ResolveDependenciesFunction(ldr.resolveDependencies)(*this);
			}
		
		/* Create a factory: */
		typedef ManagedFactory* (*CreateFactoryFunction)(FactoryManager<ManagedFactory>&); // Type of class loader function stored in DSOs
		ManagedFactory* newFactory=CreateFactoryFunction(ldr.createFactory)(*this);
		if(newFactory==0)
			throw Error(Misc::makeStdErrMsg(__PRETTY_FUNCTION__,"Cannot create factory object for class %s",cn.first.c_str()));
		
		/* Add the new factory to the list: */
		FactoryData newFactoryData(ldr.dsoHandle,newFactory,DestroyFactoryFunction(ldr.destroyFactory));
		newFactoryData.classId=getNewClassId();
		factories.push_back(newFactoryData);
		
		/* Return the new factory: */
		return std::make_pair(newFactory,true);
		}
	}

template <class ManagedFactoryParam>
inline
void
FactoryManager<ManagedFactoryParam>::addClass(
	typename FactoryManager<ManagedFactoryParam>::ManagedFactory* newFactory,
	typename FactoryManager<ManagedFactoryParam>::DestroyFactoryFunction newDestroyFactoryFunction)
	{
	/* Check if the requested class already exists: */
	if(findFactory(newFactory->getClassName())!=factories.end())
		throw Error(Misc::makeStdErrMsg(__PRETTY_FUNCTION__,"Class %s already exists",newFactory->getClassName()));
	
	/* Add the factory to the class list: */
	FactoryData newFactoryData(0,newFactory,newDestroyFactoryFunction);
	
	/* Store new factory in list: */
	newFactoryData.classId=getNewClassId();
	factories.push_back(newFactoryData);
	}

template <class ManagedFactoryParam>
inline
void
FactoryManager<ManagedFactoryParam>::releaseClass(
	typename FactoryManager<ManagedFactoryParam>::ManagedFactory* factory)
	{
	/* Get an iterator to the requested class: */
	typename FactoryList::iterator fIt;
	for(fIt=factories.begin();fIt!=factories.end()&&fIt->factory!=factory;++fIt)
		;
	
	/* Destroy the class's factory: */
	destroyFactory(fIt);
	}

template <class ManagedFactoryParam>
inline
void
FactoryManager<ManagedFactoryParam>::releaseClasses(
	void)
	{
	/* Process the class list backwards to release derived classes before their base classes: */
	for(typename FactoryList::reverse_iterator fIt=factories.rbegin();fIt!=factories.rend();++fIt)
		{
		/* Destroy factory and close DSO: */
		if(fIt->destroyFactoryFunction!=0)
			fIt->destroyFactoryFunction(fIt->factory);
		fIt->factory=0;
		fIt->destroyFactoryFunction=0;
		if(fIt->dsoHandle!=0)
			dlclose(fIt->dsoHandle);
		fIt->dsoHandle=0;
		}
	
	/* Clear the factory list: */
	factories.clear();
	}

template <class ManagedFactoryParam>
inline
typename FactoryManager<ManagedFactoryParam>::ClassIdType
FactoryManager<ManagedFactoryParam>::getClassId(
	const typename FactoryManager<ManagedFactoryParam>::ManagedFactory* factory)
	const
	{
	typename FactoryList::const_iterator fIt;
	for(fIt=factories.begin();fIt!=factories.end()&&fIt->factory!=factory;++fIt)
		;
	if(fIt!=factories.end())
		return fIt->classId;
	else
		return ClassIdType(0);
	}

template <class ManagedFactoryParam>
inline
typename FactoryManager<ManagedFactoryParam>::ManagedFactory*
FactoryManager<ManagedFactoryParam>::getFactory(
	typename FactoryManager<ManagedFactoryParam>::ClassIdType classId)
	const
	{
	typename FactoryList::const_iterator fIt;
	for(fIt=factories.begin();fIt!=factories.end()&&fIt->classId!=classId;++fIt)
		;
	if(fIt!=factories.end())
		return fIt->factory;
	else
		return 0;
	}

}
