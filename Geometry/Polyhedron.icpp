/***********************************************************************
Polyhedron - Class to represent convex polyhedra resulting from
intersections of half spaces.
Copyright (c) 2009-2023 Oliver Kreylos

This file is part of the Templatized Geometry Library (TGL).

The Templatized Geometry Library is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Templatized Geometry Library is distributed in the hope that it will
be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with the Templatized Geometry Library; if not, write to the Free
Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
02111-1307 USA
***********************************************************************/

#define GEOMETRY_POLYHEDRON_IMPLEMENTATION

#include <Geometry/Polyhedron.h>

#include <algorithm>
#include <Misc/HashTable.h>
#include <Geometry/AffineCombiner.h>
#include <Geometry/Vector.h>
#include <Geometry/Plane.h>
#include <Geometry/Polygon.h>

namespace Geometry {

/***************************
Methods of class Polyhedron:
***************************/

template <class ScalarParam>
inline
Polyhedron<ScalarParam>::Polyhedron(
	void)
	{
	}

template <class ScalarParam>
inline
Polyhedron<ScalarParam>::Polyhedron(
	const typename Polyhedron<ScalarParam>::Point& min,
	const typename Polyhedron<ScalarParam>::Point& max)
	{
	/* Create the eight box corner points: */
	Point corners[8];
	for(int i=0;i<8;++i)
		for(int j=0;j<3;++j)
			corners[i][j]=(i&(0x1<<j))?max[j]:min[j];
	
	/* Create half-edges for all box faces: */
	edges.push_back(Edge(corners[0], 1,11)); // 0, min[0]
	edges.push_back(Edge(corners[4], 2,23));
	edges.push_back(Edge(corners[6], 3,12));
	edges.push_back(Edge(corners[2], 0,16));
	edges.push_back(Edge(corners[1], 5,18)); // 4, max[0]
	edges.push_back(Edge(corners[3], 6,14));
	edges.push_back(Edge(corners[7], 7,21));
	edges.push_back(Edge(corners[5], 4, 9));
	edges.push_back(Edge(corners[0], 9,19)); // 8, min[1]
	edges.push_back(Edge(corners[1],10, 7));
	edges.push_back(Edge(corners[5],11,20));
	edges.push_back(Edge(corners[4], 8, 0));
	edges.push_back(Edge(corners[2],13, 2)); // 12, max[1]
	edges.push_back(Edge(corners[6],14,22));
	edges.push_back(Edge(corners[7],15, 5));
	edges.push_back(Edge(corners[3],12,17));
	edges.push_back(Edge(corners[0],17, 3)); // 16, min[2]
	edges.push_back(Edge(corners[2],18,15));
	edges.push_back(Edge(corners[3],19, 4));
	edges.push_back(Edge(corners[1],16, 8));
	edges.push_back(Edge(corners[4],21,10)); // 20, max[2]
	edges.push_back(Edge(corners[5],22, 6));
	edges.push_back(Edge(corners[7],23,13));
	edges.push_back(Edge(corners[6],20, 1));
	}

template <class ScalarParam>
inline
Polyhedron<ScalarParam>::Polyhedron(
	const Polyhedron<ScalarParam>& source)
	:edges(source.edges)
	{
	}

template <class ScalarParam>
inline
Polyhedron<ScalarParam>&
Polyhedron<ScalarParam>::clip(
	const typename Polyhedron<ScalarParam>::Plane& plane)
	{
	typedef Misc::HashTable<Card,void> IndexSet;
	typedef Misc::HashTable<Card,Card> IndexMapper;
	
	/* Find the indices of all half edges that intersect the plane: */
	IndexMapper indexMapper(101);
	Card nextIndex=0;
	Card numIntersectedEdges=0;
	Card intersectedEdgeIndex=0;
	IndexSet ioEdges(17);
	Card numEdges=edges.size();
	for(Card i=0;i<numEdges;++i)
		{
		/* Get the plane distance of start and end points of edge i: */
		Scalar d0=plane.calcDistance(edges[i].start);
		Scalar d1=plane.calcDistance(edges[edges[i].next].start);
		
		/* Classify the edge: */
		if(d0<Scalar(0)&&d1<Scalar(0))
			{
			/* Keep the edge: */
			indexMapper.setEntry(typename IndexMapper::Entry(i,nextIndex));
			++nextIndex;
			}
		else if(d0<Scalar(0)||d1<Scalar(0))
			{
			/* Keep the edge: */
			indexMapper.setEntry(typename IndexMapper::Entry(i,nextIndex));
			++nextIndex;
			
			if(d0<Scalar(0))
				{
				/* Mark the edge as intersected: */
				++numIntersectedEdges;
				intersectedEdgeIndex=i;
				}
			else
				{
				/* Mark the edge as the opposite of an intersected edge: */
				ioEdges.setEntry(typename IndexSet::Entry(i));
				}
			}
		}
	
	/* Remember the number of retained edges: */
	Card newNumEdges=nextIndex;
	
	/* Check for trivial cases: */
	if(newNumEdges==0)
		{
		/* Remove all edges: */
		edges.clear();
		return *this;
		}
	else if(numIntersectedEdges==0)
		{
		/* Leave the polyhedron alone: */
		return *this;
		}
	
	/* Sort the list of intersected edges to form a loop: */
	IndexMapper newFaceEdges(17);
	EdgeList newFace;
	while(newFace.size()<numIntersectedEdges)
		{
		Edge newEdge;
		
		/* Calculate the new edge's starting point: */
		const Point& p0=edges[intersectedEdgeIndex].start;
		Scalar d0=plane.calcDistance(p0);
		const Point& p1=edges[edges[intersectedEdgeIndex].next].start;
		Scalar d1=plane.calcDistance(p1);
		newEdge.start=Geometry::affineCombination(p0,p1,(Scalar(0)-d0)/(d1-d0));
		
		/* Find the next intersected edge around the same face as the current last edge: */
		Card edgeIndex;
		for(edgeIndex=edges[intersectedEdgeIndex].next;!ioEdges.isEntry(edgeIndex);edgeIndex=edges[edgeIndex].next)
			;
		newEdge.next=indexMapper.getEntry(edgeIndex).getDest();
		newEdge.opposite=newNumEdges+numIntersectedEdges+newFace.size();
		
		/* Store the index of the new face edge: */
		newFaceEdges.setEntry(IndexMapper::Entry(intersectedEdgeIndex,newFace.size()));
		
		/* Store the new face edge: */
		newFace.push_back(newEdge);
		
		/* Go to the next intersected face: */
		intersectedEdgeIndex=edges[edgeIndex].opposite;
		}
	
	/* Create the new list of edges: */
	EdgeList newEdges;
	
	/* Create the edges of the result polyhedron: */
	for(Card i=0;i<numEdges;++i)
		{
		/* Get the plane distance of start and end points of edge i: */
		Scalar d0=plane.calcDistance(edges[i].start);
		Scalar d1=plane.calcDistance(edges[edges[i].next].start);
		
		/* Classify the edge: */
		if(d0<Scalar(0)&&d1<Scalar(0))
			{
			/*****************************************************************
			If an edge is completely inside, its opposite edge must be as
			well, and its next edge must at least be partially inside.
			Therefore, indexMapper will contain the new indices for both
			edges.
			*****************************************************************/
			
			/* Keep the edge: */
			newEdges.push_back(Edge(edges[i].start,indexMapper.getEntry(edges[i].next).getDest(),indexMapper.getEntry(edges[i].opposite).getDest()));
			}
		else if(d0<Scalar(0))
			{
			/*****************************************************************
			If an edge's start point is inside, its opposite edge's index will
			be contained in indexMapper, and its next edge is a new face edge
			whose index can be calculated from newFaceEdges.
			*****************************************************************/
			
			/* Find the index of the next edge from the new face loop: */
			Card next=newNumEdges+newFaceEdges.getEntry(i).getDest();
			
			/* Retain the edge: */
			newEdges.push_back(Edge(edges[i].start,next,indexMapper.getEntry(edges[i].opposite).getDest()));
			}
		else if(d1<Scalar(0))
			{
			/*****************************************************************
			If an edge's end point is inside, its start point must be
			calculated by clipping, and its next edge and opposite edge will
			both be contained in indexMapper.
			*****************************************************************/
			
			/* Calculate the new start point: */
			Point newStart=Geometry::affineCombination(edges[edges[i].next].start,edges[i].start,(Scalar(0)-d1)/(d0-d1));
			
			/* Retain the clipped edge: */
			newEdges.push_back(Edge(newStart,indexMapper.getEntry(edges[i].next).getDest(),indexMapper.getEntry(edges[i].opposite).getDest()));
			}
		}
	
	/* Add the closing edges for all clipped faces to the polyhedron: */
	for(typename EdgeList::const_iterator nfIt=newFace.begin();nfIt!=newFace.end();++nfIt)
		newEdges.push_back(*nfIt);
	
	/* Add the edges of the closing face to the polyhedron: */
	for(Card i=0;i<newFace.size();++i)
		{
		Edge newEdge;
		newEdge.start=newFace[(i+1)%newFace.size()].start;
		newEdge.next=newNumEdges+numIntersectedEdges+(i+newFace.size()-1)%newFace.size();
		newEdge.opposite=newNumEdges+i;
		newEdges.push_back(newEdge);
		}
	
	/* Replace the list of edges with the new edges: */
	std::swap(edges,newEdges);
	return *this;
	}

template <class ScalarParam>
inline
typename Polyhedron<ScalarParam>::Polygon
Polyhedron<ScalarParam>::intersect(
	const typename Polyhedron<ScalarParam>::Plane& plane) const
	{
	typedef Misc::HashTable<Card,void> IndexSet;
	
	/* Find any edge that intersects the given plane: */
	Card numEdges=edges.size();
	Card intersectedEdgeIndex=numEdges;
	IndexSet ioEdges(17);
	for(Card i=0;i<numEdges;++i)
		{
		/* Get the plane distance of the start and end points of edge i: */
		Scalar d0=plane.calcDistance(edges[i].start);
		Scalar d1=plane.calcDistance(edges[edges[i].next].start);
		
		/* Classify the edge: */
		if(d0<Scalar(0)&&d1>=Scalar(0))
			{
			/* Remember the edge: */
			intersectedEdgeIndex=i;
			}
		else if(d0>=Scalar(0)&&d1<Scalar(0))
			{
			/* Mark the edge as a face exit: */
			ioEdges.setEntry(IndexSet::Entry(i));
			}
		}
	
	/* Bail out if no intersection was found: */
	if(intersectedEdgeIndex==numEdges)
		return Polygon();
	
	/* Iterate around the polyhedron along the plane intersection: */
	Polygon result(ioEdges.getNumEntries());
	Card nextVertex=0;
	Card edgeIndex=intersectedEdgeIndex;
	do
		{
		/* Store the edge's intersection point in the result polygon: */
		const Point& p0=edges[edgeIndex].start;
		Scalar d0=plane.calcDistance(p0);
		const Point& p1=edges[edges[edgeIndex].next].start;
		Scalar d1=plane.calcDistance(p1);
		result.getVertex(nextVertex)=Geometry::affineCombination(p0,p1,(Scalar(0)-d0)/(d1-d0));
		++nextVertex;
		
		/* Find the next intersected edge around the same face as the current last edge: */
		Card i;
		for(i=edges[edgeIndex].next;!ioEdges.isEntry(i);i=edges[i].next)
			;
		
		/* Go to the next intersected face: */
		edgeIndex=edges[i].opposite;
		}
	while(edgeIndex!=intersectedEdgeIndex);
	
	return result;
	}

template <class ScalarParam>
inline
typename Polyhedron<ScalarParam>::Scalar
Polyhedron<ScalarParam>::calcVolume(void) const
	{
	/* Calculate the centroid of all polyhedron vertices as an anchor point for volume calculation: */
	typename Point::AffineCombiner cc;
	for(typename EdgeList::const_iterator eIt=edges.begin();eIt!=edges.end();++eIt)
		cc.addPoint(eIt->start);
	Point center=cc.getPoint();
	
	/* Calculate the polyhedron's volume by adding up the signed volumes of all tetrahedra defined by the center point and the polyhedron's face triangles: */
	Scalar volume(0);
	Card numEdges(edges.size());
	bool* edgeFlags=new bool[numEdges];
	for(Card i=0;i<numEdges;++i)
		edgeFlags[i]=false;
	for(Card e0=0;e0<numEdges;++e0)
		if(!edgeFlags[e0])
			{
			/* Calculate the signed volume of the face defined by the current edge's face loop: */
			edgeFlags[e0]=true;
			Card e1=edges[e0].next;
			Card e2=edges[e1].next;
			while(e2!=e0)
				{
				edgeFlags[e1]=true;
				
				/* Calculate the signed volume of the tetrahedron: */
				volume+=((edges[e1].start-edges[e0].start)^(edges[e2].start-edges[e0].start))*(edges[e0].start-center);
				
				/* Go to the next triangle of the current face: */
				e1=e2;
				e2=edges[e1].next;
				}
			edgeFlags[e1]=true;
			}
	delete[] edgeFlags;
	
	return volume/Scalar(6);
	}

}
