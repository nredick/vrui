/***********************************************************************
SceneGraphReader - Class to read a complete scene graph from a binary
file for compact storage or network transmission.
Copyright (c) 2021 Oliver Kreylos

This file is part of the Simple Scene Graph Renderer (SceneGraph).

The Simple Scene Graph Renderer is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Simple Scene Graph Renderer is distributed in the hope that it will
be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with the Simple Scene Graph Renderer; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
***********************************************************************/

#ifndef SCENEGRAPH_SCENEGRAPHREADER_IMPLEMENTATION
#define SCENEGRAPH_SCENEGRAPHREADER_IMPLEMENTATION

#include <SceneGraph/SceneGraphReader.h>

#include <Misc/SizedTypes.h>
#include <Misc/VarIntMarshaller.h>
#include <Misc/Marshaller.h>

namespace SceneGraph {

/******************************************
Template methods of class SceneGraphReader:
******************************************/

/* Generic method for single-valued fields: */

template <class ValueParam>
inline void SceneGraphReader::readField(SF<ValueParam>& field)
	{
	/* Read the field's value: */
	field.setValue(Misc::Marshaller<ValueParam>::read(*sourceFile));
	}

/* Generic method for multi-valued fields: */

template <class ValueParam>
inline void SceneGraphReader::readField(MF<ValueParam>& field)
	{
	typename MF<ValueParam>::ValueList& values=field.getValues();
	
	/* Read the number of values in the field followed by the field's values: */
	values.clear();
	unsigned int numValues=Misc::readVarInt32(*sourceFile);
	values.reserve(numValues);
	for(unsigned int i=0;i<numValues;++i)
		values.push_back(Misc::Marshaller<ValueParam>::read(*sourceFile));
	}

}

#endif
