/***********************************************************************
SceneGraphWriter - Class to write a complete scene graph to a binary
file for compact storage or network transmission.
Copyright (c) 2021 Oliver Kreylos

This file is part of the Simple Scene Graph Renderer (SceneGraph).

The Simple Scene Graph Renderer is free software; you can redistribute
it and/or modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

The Simple Scene Graph Renderer is distributed in the hope that it will
be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License along
with the Simple Scene Graph Renderer; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
***********************************************************************/

#ifndef SCENEGRAPH_SCENEGRAPHWRITER_IMPLEMENTATION
#define SCENEGRAPH_SCENEGRAPHWRITER_IMPLEMENTATION

#include <SceneGraph/SceneGraphWriter.h>

#include <Misc/SizedTypes.h>
#include <Misc/VarIntMarshaller.h>
#include <Misc/Marshaller.h>

namespace SceneGraph {

/******************************************
Template methods of class SceneGraphWriter:
******************************************/

/* Generic method for single-valued fields: */

template <class ValueParam>
inline void SceneGraphWriter::writeField(const SF<ValueParam>& field)
	{
	/* Write the field's value: */
	Misc::Marshaller<ValueParam>::write(field.getValue(),*destFile);
	}

/* Generic method for multi-valued fields: */

template <class ValueParam>
inline void SceneGraphWriter::writeField(const MF<ValueParam>& field)
	{
	const typename MF<ValueParam>::ValueList& values=field.getValues();
	
	/* Write the number of values in the field: */
	Misc::writeVarInt32(values.size(),*destFile);
	
	/* Write the field's values: */
	for(typename MF<ValueParam>::ValueList::const_iterator vIt=values.begin();vIt!=values.end();++vIt)
		Misc::Marshaller<ValueParam>::write(*vIt,*destFile);
	}

}

#endif
